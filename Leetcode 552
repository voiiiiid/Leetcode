class Solution {
    int mod = (int)(Math.pow(10, 9)) + 7;
    int[][][] dp;
    public int checkRecord(int n) {
        dp = new int[n+1][2][3];
        for(int i = 0; i < n+1; i++){
            for (int j = 0; j < 2; j++){
                for(int k = 0; k < 3; k++){
                    dp[i][j][k] = -1;
                }
            }
        }
        return solve(n, 0, 0);
    }
    
    public int solve(int n, int absent, int late){
        if(absent >= 2 || late >= 3) return 0;
        
        if(n == 0){
            return 1;
        }
        
        if(dp[n][absent][late] != -1) return dp[n][absent][late];
//             for present
        int P = solve(n-1, absent, 0)%mod;
//             for absent
        int A = solve(n-1, absent+1, 0)%mod;
//             for late
        int L = solve(n-1, absent ,late+1)%mod;
        
        return dp[n][absent][late] = (((P + A)%mod) + L)%mod;
    }
}
