class Solution {
    int N;
    int[][] dp;
    public int minFallingPathSum(int[][] grid) {
        N = grid.length;
        dp = new int[N+1][N+1];
        for(int i = 0; i < N+1; i++){
            for(int j = 0; j < N+1; j++){
                dp[i][j] = Integer.MAX_VALUE;
            }
        }
        
        int result = Integer.MAX_VALUE;
        for(int col = 0; col < N; col++){
            result = Math.min(result, solve(col, 0, grid));
        }
        return result;
    }
    
    public int solve(int col, int row, int[][] grid){
        if(row == N-1) return grid[row][col];
        if(dp[row][col] != Integer.MAX_VALUE) return dp[row][col];
        int ans = Integer.MAX_VALUE;
        for(int nextCol = 0; nextCol < N; nextCol++){
            if(nextCol != col) ans = Math.min(ans, solve(nextCol, row+1, grid));
        }
        return dp[row][col] = ans + grid[row][col];
    }
}
