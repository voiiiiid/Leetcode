# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def isPalindrome(self, head: Optional[ListNode]) -> bool:
        arr = []
        curr = head
        if head is None or head.next is None:
            return True
        while curr is not None:
            arr.append(curr.val)
            curr = curr.next
        if arr == arr[::-1]:
            return True
        else:
            return False



#approach 2
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def isPalindrome(self, head: Optional[ListNode]) -> bool:
        if head is None or head.next is None:
            return True

        slow = head
        fast = head
        prev = None
        while fast and fast.next:
            fast = fast.next.next
            temp = slow.next
            slow.next = prev
            prev = slow
            slow = temp
            
        if(fast):
            slow = slow.next

        while(slow and prev):
            if(slow.val != prev.val):
                return False
            slow = slow.next
            prev = prev.next
        return True
