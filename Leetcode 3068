class Solution {
    public long maximumValueSum(int[] nums, int k, int[][] edges) {
        List<Integer> fayda = new ArrayList<>();
        long normalSum = 0;

        for (int num : nums) {
            fayda.add((num ^ k) - num);
            normalSum += (long) num;
        }

        Collections.sort(fayda, Collections.reverseOrder());

        for (int i = 0; i < fayda.size() - 1; i += 2) {
            long pairSum = fayda.get(i) + fayda.get(i + 1);

            if (pairSum > 0) {
                normalSum += pairSum;
            }
        }
        return normalSum;
    }
}



#approach 2

class Solution {
    public long maximumValueSum(int[] nums, int k, int[][] edges) {
        long idealSum = 0;
        int count = 0;
        int nuksan = Integer.MAX_VALUE;
        for(int i : nums){
            if((i ^ k) > i){
                idealSum += (i ^ k);
                count += 1;
            }
            else{
                idealSum += i;
            }
            nuksan = Math.min(nuksan, Math.abs((i^k) - i));
        }
        if(count % 2 != 0){
            idealSum -= nuksan;
        }
        return idealSum;
    }
}
