# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
#approach 1
reversing from the mid and do what it says on question
class Solution:
    def reorderList(self, head: Optional[ListNode]) -> None:
        """
        Do not return anything, modify head in-place instead.
        """
        if head is None or head.next is None:
                return head

        def reverse(head):
            if head is None or head.next is None:
                return head
            lastnode = reverse(head.next)
            head.next.next = head
            head.next = None
            return lastnode
        
        def mid(head):
            if head is None or head.next is None:
                return head
            slow = head
            fast = head
            while fast and fast.next:
                slow = slow.next
                fast = fast.next.next
            return slow
        
        middle = mid(head)
        rev = reverse(middle)
        curr = head
        while(rev.next):
            headnext = curr.next
            revnext = rev.next
            curr.next = rev
            rev.next = headnext
            rev = revnext
            curr = headnext
