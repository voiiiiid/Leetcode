lis(longest increasing subsequence ka variant hai ye)
#approach 1
a c f g b d
   i
j
ye jayega aur bolega bhai kya tu mere saath rehke k se chota hai agar han to +1 karke piche bhi dekhke aao agar nahi hai to bhi peeche dekho...
aur ek array mei saath k saath store karke rkhenge ki bhai abhi tk ka max ye hai tu isme ek aur add karke answer dhund le
aur baki answer check karne k liye vo aur peeche jayega isme TLE aayega kyunki hum saari elements ko visit karenge chahe vo difference k se chota ho ya na ho 
jabki ideal hona chayie ki hum pehle hi choose karlein ki humein jana kiske pass hai mtlb vo k range mei hai ya nahi taki aadhe elements pehle hi eliminate ho jaye



class Solution {
    public int longestIdealString(String s, int k) {
        int N = s.length();
        int[] res = new int[N+1];
        for(int i = 0; i < N; i++){
            res[i] = 1;
        }
        
        for(int i = 1; i < N; i++){
            for(int j = i-1; j>= 0; j--){
                if(Math.abs((int)s.charAt(j)-(int)s.charAt(i)) <= k){
                    res[i] = Math.max(res[i], res[j]+1);
                }
            }
        }
        int max = Arrays.stream(res).max().getAsInt();
        return max;
    }
}
