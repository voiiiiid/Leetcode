class Solution {
    
    public void findingnimo(StringBuilder curr, Queue<String> q, Set<String> visited){
        for(int i = 0; i < 4; i++){
            char ch = curr.charAt(i);
            
            char dec = (ch == '0') ? '9' : (char) (ch - 1);
            char inc = (ch == '9') ? '0' : (char) (ch + 1);
            
            curr.setCharAt(i, dec);
            String decStr = curr.toString();
            if(!visited.contains(decStr)){
                visited.add(decStr);
                q.add(decStr);
            }
            curr.setCharAt(i, inc);
            String incStr = curr.toString();
            if(!visited.contains(incStr)){
                visited.add(incStr);
                q.add(incStr);
            }
            curr.setCharAt(i, ch);
        }
    }
    
    public int openLock(String[] deadends, String target) {
        Set<String> visited = new HashSet<>();
        for(String dead : deadends){
            visited.add(dead);
        }
        String start = "0000";
        if(visited.contains(start)) return -1;
        
        Queue<String> q = new LinkedList<>();
        q.add(start);
        
        int level = 0;
        while(!q.isEmpty()){
            int n = q.size();
            while(n-- > 0){
                String curr = q.poll();
                
                if(curr.equals(target)) return level;
                
                StringBuilder newcurr = new StringBuilder(curr);
                
                findingnimo(newcurr, q, visited);
            }
            level++;
        }
        return -1;
    }
}
